name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run vet
      run: go vet ./...
    
    - name: Run tests
      run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.txt
    
    - name: Build binary
      run: go build -o pxc ./cmd/pxc
    
    - name: Test CLI help
      run: ./pxc --help
    
    - name: Test CLI version
      run: ./pxc version
    
    - name: Test build command (dry-run)
      run: ./pxc build --dry-run -f examples/simple-app/LXCfile.yml --verbose
    
    - name: Test ps command (dry-run)
      run: ./pxc ps --dry-run --verbose
    
    - name: Test up command (dry-run)
      run: ./pxc up --dry-run -f examples/full-stack/lxc-stack.yml --verbose

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22
    
    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest || echo "Gosec installation failed, skipping"
        if command -v gosec &> /dev/null; then
          gosec -fmt sarif -out gosec.sarif -stdout ./... || echo "Gosec scan completed with warnings"
        fi
      continue-on-error: true
    
    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./... || echo "Vulnerability scan completed with warnings"
      continue-on-error: true