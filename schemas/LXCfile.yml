# LXCfile.yml Schema - Container Build Definition
# This file defines how to build an LXC container template from a base image

# Required: Base template/image to start from
from: "debian:12"  # Can be: debian:12, ubuntu:22.04, alpine:latest, or path to local template

# Optional: Container metadata
metadata:
  name: "my-app"
  description: "Node.js web application"
  version: "1.0.0"
  author: "developer@example.com"

# Optional: LXC-specific features and configurations
features:
  unprivileged: true        # Run as unprivileged container (recommended)
  nesting: false           # Allow nested containers (Docker-in-LXC)
  keyctl: false           # Allow keyring access
  fuse: false             # Enable FUSE filesystem support
  mount: []               # Mount options: nfs, cifs, etc.

# Optional: Resource limits and hardware settings
resources:
  cores: 2                # CPU cores (can be fractional: 1.5)
  cpulimit: 0             # CPU limit in percentage (0 = unlimited)
  cpuunits: 1024          # CPU scheduling weight
  memory: 1024            # Memory in MB
  swap: 512               # Swap in MB
  rootfs: 8               # Root filesystem size in GB
  net_rate: 0             # Network rate limit in MB/s (0 = unlimited)

# Optional: Security and isolation settings
security:
  isolation: "default"    # default | strict | privileged
  apparmor: true         # Enable AppArmor protection
  seccomp: true          # Enable seccomp filtering
  capabilities:          # Linux capabilities to add/drop
    add: []              # e.g., ["SYS_ADMIN", "NET_ADMIN"]
    drop: []             # e.g., ["SYS_MODULE", "SYS_TIME"]

# Required: Build steps (executed in order during template creation)
setup:
  # Install packages and dependencies
  - run: |
      apt-get update
      apt-get install -y nodejs npm curl

  # Copy files from host to container
  - copy:
      source: "./app"
      dest: "/opt/app"
      owner: "root:root"
      mode: "755"

  # Set environment variables
  - env:
      NODE_ENV: "production"
      PORT: "3000"
      APP_VERSION: "1.0.0"

  # Install application dependencies
  - run: |
      cd /opt/app
      npm ci --only=production

  # Create directories and set permissions
  - run: |
      mkdir -p /opt/app/logs /opt/app/data
      chown -R 1000:1000 /opt/app

  # Configure services (systemd, init.d, etc.)
  - copy:
      source: "./config/app.service"
      dest: "/etc/systemd/system/app.service"
  - run: |
      systemctl enable app.service

# Optional: Default command/entrypoint when container starts
startup:
  command: "systemctl start app.service"  # Default startup command
  user: "root"                           # User to run command as
  working_dir: "/opt/app"                # Working directory

# Optional: Network configuration
network:
  hostname: "app-container"              # Container hostname
  domain: "local"                        # DNS domain
  dns:                                   # DNS servers
    - "8.8.8.8"
    - "1.1.1.1"
  searchdomain: "local"                  # DNS search domain

# Optional: Mount points and volumes
mounts:
  # Bind mount from host
  - source: "/host/data"
      target: "/opt/app/data"
      type: "bind"
      readonly: false
      backup: true                       # Include in Proxmox backups

  # Directory mount point (will be created on host)
  - target: "/opt/app/logs"
      type: "volume"
      size: "1G"                        # Size limit
      backup: false

# Optional: Exposed ports for networking
ports:
  - container: 3000
    host: 8080                          # Map container:3000 to host:8080
    protocol: "tcp"                     # tcp | udp

  - container: 443
    protocol: "tcp"                     # No host port = use same port

# Optional: Health check configuration
health:
  test: "curl -f http://localhost:3000/health || exit 1"
  interval: "30s"
  timeout: "5s"
  retries: 3
  start_period: "60s"

# Optional: Post-build cleanup and optimization
cleanup:
  - run: |
      apt-get autoremove -y
      apt-get autoclean
      rm -rf /var/lib/apt/lists/*
      rm -rf /tmp/*

# Optional: Labels for metadata and organization
labels:
  environment: "production"
  project: "my-web-app"
  tier: "backend"
  version: "1.0.0"